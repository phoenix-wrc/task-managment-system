<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.ph0en1x.taskmanagementsystem.repository.UserRepository">
    <resultMap id="UserResultMap"
               type="site.ph0en1x.taskmanagementsystem.model.entity.user.User"
               autoMapping="false">
        <id property="id" column="user_id"/>
        <result property="name" column="user_name"/>
        <result property="secondName" column="user_secondName"/>
        <result property="lastName" column="user_lastName"/>
        <result property="username" column="user_username"/>
        <result property="password" column="user_password"/>
        <collection property="roles"
                    ofType="site.ph0en1x.taskmanagementsystem.model.entity.user.Role"
                    autoMapping="false">
            <result property="name" column="user_role"/>
        </collection>
        <collection property="tasksOwn"
                    ofType="site.ph0en1x.taskmanagementsystem.model.entity.task.Task"
                    resultMap="site.ph0en1x.taskmanagementsystem.repository.mapper.TaskRowMapper"
                    autoMapping="false"/>
        <collection property="tasksOnExecuting"
                    ofType="site.ph0en1x.taskmanagementsystem.model.entity.task.Task"
                    resultMap="site.ph0en1x.taskmanagementsystem.repository.mapper.TaskRowMapper"
                    autoMapping="false"/>
    </resultMap>

    <select id="findById">
        select u.id       as user_id,
        u.name            as user_name,
        u.second_name     as user_second_name,
        u.last_name       as user_last_name,
        u.username        as user_username,
        u.password        as user_password,
        ur.role           as user_role,
        t.id              as task_id,
        t.title           as task_title,
        t.description     as task_description,
        t.expiration_date as task_expiration_date,
        t.status          as task_status,
        tp.priority_name  as task_priority,
        te.user_id        as task_executor_id,
        uto.user_id       as task_author_id
        from app_user u
        LEFT JOIN user_role ur on u.id = ur.user_id
        LEFT JOIN user_task_owner uto on u.id = uto.user_id
        LEFT JOIN task t on t.id = uto.task_id
        JOIN task_priority tp on tp.id = t.priority_id
        JOIN user_task_executor te on te.task_id = t.id
        where u.id = #{id};
    </select>

    <select id="findByUsername">
        select u.id       as user_id,
        u.name            as user_name,
        u.second_name     as user_second_name,
        u.last_name       as user_last_name,
        u.username        as user_username,
        u.password        as user_password,
        ur.role           as user_role,
        t.id              as task_id,
        t.title           as task_title,
        t.description     as task_description,
        t.expiration_date as task_expiration_date,
        t.create_date     as task_create_date,
        t.status          as task_status,
        tp.priority_name  as task_priority,
        te.user_id        as task_executor_id,
        uto.user_id       as task_author_id
        from app_user u
        LEFT JOIN user_role ur on u.id = ur.user_id
        LEFT JOIN user_task_owner uto on u.id = uto.user_id
        LEFT JOIN task t on t.id = uto.task_id
        JOIN task_priority tp on tp.id = t.priority_id
        JOIN user_task_executor te on te.task_id = t.id
        where u.username = ? #{username};
    </select>

    <insert id="create" keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        INSERT INTO app_user (name, second_name, last_name, username, password)
        VALUES (#{name},#{secondName},#{lastName},#{username},#{password});
    </insert>

    <update id="update" >
        UPDATE app_user
        SET name = #{name},
        second_name = #{secondName},
        last_name = #{lastName} ,
        username = #{username},
        password = #{password}
        where id = #{id});
    </update>


    <insert id="insertUserRole">
        INSERT INTO user_role (user_id, role)
        VALUES (#{userId}, #{role});
    </insert>

    <select id="isTaskExecutor" resultType="boolean">
        SELECT exists(SELECT 1
        FROM user_task_executor
        WHERE user_id = #{userId}
        AND task_id = #{taskId})
    </select>

    <select id="isTaskOwner" resultType="boolean">
        SELECT exists(SELECT 1
        FROM user_task_owner
        WHERE user_id = #{userId}
        AND task_id = #{taskId})
    </select>

    <delete id="delete">
        DELETE FROM app_user
        WHERE id = #{id};
    </delete>
</mapper>